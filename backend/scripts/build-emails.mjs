#!/usr/bin/env node
/**
 * Build script to pre-render React-Email templates to static HTML files
 * This avoids runtime React-Email rendering and MessageChannel issues in Cloudflare Workers
 */

import { mkdirSync, writeFileSync } from 'node:fs';
import { dirname, join } from 'node:path';
import { fileURLToPath } from 'node:url';

// Import React-Email components (this runs in Node.js, so no MessageChannel issues)
import { render } from '@react-email/render';

// Import our email templates with proper extension resolution
import { PasswordResetEmail } from '../src/emails/password-reset-email.tsx';
import { VerificationEmail } from '../src/emails/verification-email.tsx';
import { WelcomeEmail } from '../src/emails/welcome-email.tsx';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

async function buildEmails() {
  console.log('üìß Building email templates...');

  // Create dist directory if it doesn't exist
  const distDir = join(__dirname, '../dist/emails');
  mkdirSync(distDir, { recursive: true });

  try {
    // Template configurations with placeholder variables
    const templates = [
      {
        name: 'verification',
        component: VerificationEmail,
        props: {
          verificationUrl: '{{VERIFICATION_URL}}',
          userEmail: '{{USER_EMAIL}}',
          appName: '{{APP_NAME}}',
        },
      },
      {
        name: 'password-reset',
        component: PasswordResetEmail,
        props: {
          resetUrl: '{{RESET_URL}}',
          userEmail: '{{USER_EMAIL}}',
          appName: '{{APP_NAME}}',
        },
      },
      {
        name: 'welcome',
        component: WelcomeEmail,
        props: {
          userEmail: '{{USER_EMAIL}}',
          firstName: '{{FIRST_NAME}}',
          appName: '{{APP_NAME}}',
        },
      },
    ];

    // Render each template
    for (const template of templates) {
      console.log(`üìù Rendering ${template.name} email template...`);

      // Render HTML version
      const html = await render(template.component(template.props));
      writeFileSync(join(distDir, `${template.name}.html`), html, 'utf-8');

      // Render plain text version
      const text = await render(template.component(template.props), { plainText: true });
      writeFileSync(join(distDir, `${template.name}.txt`), text, 'utf-8');

      // Generate TypeScript module for Cloudflare Workers
      // Convert kebab-case template names to camelCase for valid JavaScript identifiers
      const camelCaseName = template.name.replace(/-([a-z])/g, (_, letter) => letter.toUpperCase());
      const pascalCaseName = camelCaseName.charAt(0).toUpperCase() + camelCaseName.slice(1);

      const tsContent = `// Auto-generated email template module
// This file is generated by scripts/build-emails.mjs - do not edit manually

export const ${camelCaseName}Html = ${JSON.stringify(html)};

export const ${camelCaseName}Text = ${JSON.stringify(text)};

export interface ${pascalCaseName}Variables {
  ${Object.keys(template.props)
    .map((key) => `${key}: string;`)
    .join('\n  ')}
}

export function process${pascalCaseName}Template(variables: ${pascalCaseName}Variables) {
  let html = ${camelCaseName}Html;
  let text = ${camelCaseName}Text;
  
  // Replace template variables with actual values
  for (const [key, value] of Object.entries(variables)) {
    // Convert camelCase to UPPERCASE_UNDERSCORE to match template placeholders
    const placeholderKey = key.replace(/([A-Z])/g, '_$1').toUpperCase();
    const placeholder = \`{{\${placeholderKey}}}\`;
    html = html.replaceAll(placeholder, value);
    text = text.replaceAll(placeholder, value);
  }
  
  return { html, text };
}
`;
      writeFileSync(join(distDir, `${template.name}.ts`), tsContent, 'utf-8');

      // Also copy to src/emails/templates for TypeScript imports
      const srcTemplateDir = join(__dirname, '../src/emails/templates');
      mkdirSync(srcTemplateDir, { recursive: true });
      writeFileSync(join(srcTemplateDir, `${template.name}.ts`), tsContent, 'utf-8');

      console.log(`‚úÖ ${template.name} template built successfully`);
    }

    console.log(`üéâ All email templates built to ${distDir}`);
    console.log('üìÅ Generated files:');
    console.log('  - verification.html');
    console.log('  - verification.txt');
    console.log('  - verification.ts (Cloudflare Workers module)');
    console.log('  - password-reset.html');
    console.log('  - password-reset.txt');
    console.log('  - password-reset.ts (Cloudflare Workers module)');
    console.log('  - welcome.html');
    console.log('  - welcome.txt');
    console.log('  - welcome.ts (Cloudflare Workers module)');
  } catch (error) {
    console.error('‚ùå Failed to build email templates:', error);
    process.exit(1);
  }
}

buildEmails();
